/* Generated by AN DISI Unibo */ 
package it.unibo.serviceactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlin.random.Random
	
class Serviceactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var missing_info = false
				var R = ""  
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("serviceactor | started")
					}
					 transition( edgeName="goto",targetState="waitForRequest", cond=doswitch() )
				}	 
				state("waitForRequest") { //this:State
					action { //it:State
						println("serviceactor | waiting for a request...")
					}
					 transition(edgeName="wtoh0",targetState="handleRequest",cond=whenRequest("r1"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("r1(X)"), Term.createTerm("r1(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  R = "${payloadArg(0)}"  
						}
						if( checkMsgContent( Term.createTerm("a1(X)"), Term.createTerm("a1(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("serviceactor | arrived missed information")
								  R = "${R}_${payloadArg(0)}"  
						}
						 
									missing_info = Random.nextBoolean()  
						println("serviceactor | missing_info = ${missing_info}")
							if(missing_info == false) {  
						answer("r1", "a1", "a1($R)"   )  
						 R = "" }
										else  
						replyreq("r2", "r1", "r2(info)"   )  
					}
					 transition( edgeName="goto",targetState="waitForInfo", cond=doswitchGuarded({ missing_info == true  
					}) )
					transition( edgeName="goto",targetState="waitForRequest", cond=doswitchGuarded({! ( missing_info == true  
					) }) )
				}	 
				state("waitForInfo") { //this:State
					action { //it:State
						println("serviceactor | waiting additional info...")
					}
					 transition(edgeName="wtoh1",targetState="handleRequest",cond=whenReply("a1"))
				}	 
			}
		}
}
