/* Generated by AN DISI Unibo */ 
package it.unibo.workshiftactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Workshiftactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("workshiftactor | started")
					}
					 transition(edgeName="morning0",targetState="morning",cond=whenEvent("switch"))
				}	 
				state("handleM1") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="morning", cond=doswitch() )
				}	 
				state("handleM2") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="afternoon", cond=doswitch() )
				}	 
				state("morning") { //this:State
					action { //it:State
						println("workshiftactor | [state = morning]")
					}
					 transition(edgeName="mtoha1",targetState="afternoon",cond=whenEvent("switch"))
					transition(edgeName="mtoha2",targetState="handleM1",cond=whenDispatch("m1"))
				}	 
				state("afternoon") { //this:State
					action { //it:State
						println("workshiftactor | [state = afternoon]")
					}
					 transition(edgeName="aton3",targetState="night",cond=whenEvent("switch"))
					transition(edgeName="aton4",targetState="handleM2",cond=whenDispatch("m2"))
				}	 
				state("night") { //this:State
					action { //it:State
						println("workshiftactor | [state = night]")
						println("workshiftactor |  i'm going to sleep. Good night")
					}
					 transition(edgeName="ntom5",targetState="morning",cond=whenEvent("switch"))
				}	 
			}
		}
}
