/* Generated by AN DISI Unibo */ 
package it.unibo.clientactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Clientactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("clientactor | started")
						request("r1", "r1(1)" ,"serviceactor" )  
						request("r1", "r1(2)" ,"serviceactor" )  
						request("r1", "r1(3)" ,"serviceactor" )  
						request("r1", "r1(4)" ,"serviceactor" )  
					}
					 transition( edgeName="goto",targetState="waitForAnswer", cond=doswitch() )
				}	 
				state("waitForAnswer") { //this:State
					action { //it:State
						println("clientactor | waiting for answer...")
					}
					 transition(edgeName="wtoh2",targetState="handleAskFromServer",cond=whenRequest("r2"))
					transition(edgeName="wtoh3",targetState="handleResponse",cond=whenReply("a1"))
				}	 
				state("handleAskFromServer") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("clientactor | sending requested info...")
						answer("r2", "a1", "a1(a)"   )  
					}
					 transition( edgeName="goto",targetState="waitForAnswer", cond=doswitch() )
				}	 
				state("handleResponse") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("clientactor | service answered to me")
					}
					 transition( edgeName="goto",targetState="waitForAnswer", cond=doswitch() )
				}	 
			}
		}
}
