/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unibo.resumableBoundaryWalker;

import it.unibo.resumableBoundaryWalker.commands.Move;
import it.unibo.resumableBoundaryWalker.commands.RobotCommand;
import it.unibo.resumableBoundaryWalker.commands.RobotInformation;
import it.unibo.resumableBoundaryWalker.commands.RobotMovement;
import it.unibo.resumableBoundaryWalker.controller.RobotController;
import it.unibo.resumableBoundaryWalker.controller.RobotMoveLogic;
import it.unibo.resumableBoundaryWalker.controller.RobotMovesInfo;
import it.unibo.resumableBoundaryWalker.supports.IssSupport;
import it.unibo.resumableBoundaryWalker.supports.IssSupportObserver;
import org.junit.Before;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;

class IssSupportObserverForTest implements IssSupportObserver {

    private static Map<Move, String> TRANSLATIONS = new HashMap<>();
    static {
        TRANSLATIONS.put(Move.MOVE_FORWARD, "w");
        TRANSLATIONS.put(Move.MOVE_BACKWARD, "b");
        TRANSLATIONS.put(Move.TURN_LEFT, "l");
        TRANSLATIONS.put(Move.TURN_RIGHT, "r");
    }

    private String moves;

    public IssSupportObserverForTest() {
        this.moves = "";
    }

    public String getMoves() {
        return this.moves;
    }

    @Override
    public void onAsyncRequest(RobotCommand command) {}

    @Override
    public void onSyncRequest(RobotCommand command, RobotMovement movement) {}

    @Override
    public void onRobotMovement(RobotMovement movement) {
        moves += TRANSLATIONS.get(movement.getMove());
    }

    @Override
    public void onRobotInformation(RobotInformation information) {}
}

public class AppTest {

    private RobotController controller;
    private IssSupportObserverForTest observer;

    @Before
    public void init() throws Exception {
        controller = new RobotController();
        observer = new IssSupportObserverForTest();

        controller.getSupport().attachObserver(observer);
        controller.setCanProceed(true);
    }

    @Test
    public void testDoBoundary() throws InterruptedException {
        while(controller.isProceeding() == true)
            Thread.sleep(1000);

        String moves = controller.getLastJouney();
        String obtainedFromTest = observer.getMoves();

        assertEquals(moves, obtainedFromTest);
        assertTrue(moves.matches("w+lw+lw+lw+l"));
    }
}
